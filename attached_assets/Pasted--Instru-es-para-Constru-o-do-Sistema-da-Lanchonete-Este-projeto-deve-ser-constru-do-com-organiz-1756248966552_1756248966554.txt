ğŸ“‹ InstruÃ§Ãµes para ConstruÃ§Ã£o do Sistema da Lanchonete
Este projeto deve ser construÃ­do com organizaÃ§Ã£o, clareza e foco em funcionalidade. Abaixo estÃ£o as diretrizes que devem ser seguidas Ã  risca.

1. Estrutura de DiretÃ³rios
Crie a seguinte estrutura de pastas:
lanchonete/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ interface/
â”‚   â”œâ”€â”€ estoque/
â”‚   â”œâ”€â”€ pedidos/
â”‚   â”œâ”€â”€ utils/
â”œâ”€â”€ data/
â”œâ”€â”€ assets/
â”œâ”€â”€ tests/
â”œâ”€â”€ README.md
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ .gitignore



2. Gerenciamento de DependÃªncias
Utilize o Poetry como gerenciador de pacotes. Configure o pyproject.toml com as seguintes dependÃªncias:
- pillow â†’ para manipulaÃ§Ã£o de imagens
- tabulate â†’ para exibiÃ§Ã£o de tabelas
- matplotlib â†’ para grÃ¡ficos
- pandas e openpyxl â†’ para exportaÃ§Ã£o de dados em Excel
- nuitka â†’ como dependÃªncia de desenvolvimento para empacotar o projeto em .exe
A versÃ£o mÃ­nima do Python deve ser 3.10.

3. Banco de Dados
Use SQLite. Crie um banco chamado banco.db dentro da pasta data. Ele deve conter:
- Tabela estoque com os campos:
- produto (TEXT, chave primÃ¡ria)
- quantidade (INTEGER)
- Tabela historico_vendas com os campos:
- id (INTEGER, chave primÃ¡ria autoincrementada)
- produto (TEXT)
- quantidade (INTEGER)
- data_hora (TEXT)

4. Interface GrÃ¡fica
Use Tkinter com ttk. A janela principal deve conter:
- Campo para registrar venda (produto + quantidade)
- BotÃ£o para registrar venda
- BotÃ£o para consultar estoque
- BotÃ£o para exportar dados
- BotÃ£o para visualizar histÃ³rico
- BotÃ£o para gerar grÃ¡fico
- Interface centralizada na tela, com layout limpo e responsivo

5. Funcionalidades ObrigatÃ³rias
- Registrar venda: atualiza o estoque e salva no histÃ³rico
- Consultar estoque: exibe os produtos e suas quantidades
- Exportar para Excel: gera planilha com os dados do estoque
- Visualizar histÃ³rico: mostra todas as vendas realizadas
- Gerar grÃ¡fico: exibe grÃ¡fico de vendas por produto

6. OrganizaÃ§Ã£o do CÃ³digo
Divida o cÃ³digo em mÃ³dulos:
- interface/ â†’ janelas e componentes visuais
- estoque/ â†’ lÃ³gica de controle de produtos e banco
- pedidos/ â†’ histÃ³rico, exportaÃ§Ãµes e grÃ¡ficos
- utils/ â†’ funÃ§Ãµes auxiliares (ex: centralizar janela)

7. Empacotamento
Utilize o Nuitka para gerar um executÃ¡vel .exe. O Ã­cone do programa deve estar na pasta assets e ser incluÃ­do no empacotamento. O executÃ¡vel deve rodar em qualquer mÃ¡quina Windows sem necessidade de instalar Python.

8. DocumentaÃ§Ã£o
No README.md, inclua:
- DescriÃ§Ã£o do projeto
- Tecnologias utilizadas
- InstruÃ§Ãµes de instalaÃ§Ã£o e execuÃ§Ã£o
- InstruÃ§Ãµes para empacotamento
- CrÃ©ditos: Victor Soares Ferreira

Este projeto deve ser construÃ­do com atenÃ§Ã£o aos detalhes, cÃ³digo limpo e modular. A interface deve ser intuitiva e o sistema deve funcionar de forma fluida, mesmo em mÃ¡quinas simples. NÃ£o omita nenhuma etapa. Se algo estiver faltando, corrija antes de prosseguir.
