"""
Script para configurar Git e conectar com GitHub
Automatiza o processo de versionamento e sincroniza√ß√£o
"""

import os
import subprocess
import json
from datetime import datetime

def executar_comando(comando, mostrar_output=True):
    """Executa comando no terminal e retorna resultado"""
    try:
        result = subprocess.run(comando, shell=True, capture_output=True, text=True, cwd='.')
        if mostrar_output and result.stdout:
            print(result.stdout.strip())
        if result.stderr and "warning" not in result.stderr.lower():
            print(f"Aviso: {result.stderr.strip()}")
        return result.returncode == 0, result.stdout.strip()
    except Exception as e:
        print(f"Erro ao executar comando: {e}")
        return False, ""

def verificar_git():
    """Verifica se Git est√° instalado"""
    print("üîç Verificando instala√ß√£o do Git...")
    sucesso, _ = executar_comando("git --version")
    if sucesso:
        print("‚úÖ Git est√° instalado")
        return True
    else:
        print("‚ùå Git n√£o est√° instalado")
        print("üì• Baixe e instale o Git de: https://git-scm.com/downloads")
        return False

def configurar_git_usuario():
    """Configura usu√°rio do Git se necess√°rio"""
    print("\nüîß Verificando configura√ß√£o do usu√°rio Git...")
    
    sucesso, nome = executar_comando("git config --global user.name", False)
    if not nome:
        nome_usuario = input("Digite seu nome para o Git: ")
        executar_comando(f'git config --global user.name "{nome_usuario}"')
    
    sucesso, email = executar_comando("git config --global user.email", False)
    if not email:
        email_usuario = input("Digite seu email do GitHub: ")
        executar_comando(f'git config --global user.email "{email_usuario}"')
    
    print("‚úÖ Usu√°rio Git configurado")

def inicializar_repositorio():
    """Inicializa reposit√≥rio Git local"""
    print("\nüìÅ Inicializando reposit√≥rio Git...")
    
    if os.path.exists('.git'):
        print("‚úÖ Reposit√≥rio Git j√° existe")
        return True
    
    sucesso, _ = executar_comando("git init")
    if sucesso:
        print("‚úÖ Reposit√≥rio Git inicializado")
        return True
    else:
        print("‚ùå Erro ao inicializar reposit√≥rio")
        return False

def criar_gitignore():
    """Cria arquivo .gitignore apropriado"""
    print("\nüìÑ Criando .gitignore...")
    
    gitignore_content = """# Arquivos Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/
ENV/
env.bak/
venv.bak/

# Arquivos do sistema
.DS_Store
Thumbs.db
*.log

# Arquivos de desenvolvimento
.pytest_cache/
.coverage
.vscode/
.idea/

# Arquivos tempor√°rios
*.tmp
*.temp
*~

# Arquivos de build
build/
dist/
*.egg-info/
main.build/
main.dist/
main.onefile-build/

# Banco de dados (manter estrutura, n√£o dados)
data/*.db
!data/.gitkeep

# Relat√≥rios gerados
data/estoque_*.xlsx
data/historico_*.xlsx
data/grafico_*.png
data/backup_*.db

# Configura√ß√µes locais
config.local.json
.env
"""
    
    with open('.gitignore', 'w', encoding='utf-8') as f:
        f.write(gitignore_content)
    
    # Criar arquivo .gitkeep para manter pasta data
    os.makedirs('data', exist_ok=True)
    with open('data/.gitkeep', 'w') as f:
        f.write('')
    
    print("‚úÖ .gitignore criado")

def criar_readme():
    """Cria README.md profissional"""
    print("\nüìÑ Criando README.md...")
    
    readme_content = """# üçî Sistema de Gerenciamento para Lanchonete

Sistema completo de gest√£o para lanchonetes desenvolvido em Python com interface gr√°fica Tkinter.

## üìã Funcionalidades

- ‚úÖ **Controle de Estoque** - Gest√£o completa de produtos, pre√ßos e categorias
- ‚úÖ **Registro de Vendas** - Sistema de vendas com c√°lculo autom√°tico de totais
- ‚úÖ **Hist√≥rico Financeiro** - Acompanhamento de todas as vendas e receitas
- ‚úÖ **Relat√≥rios Excel** - Exporta√ß√£o de dados para an√°lise
- ‚úÖ **Gr√°ficos de An√°lise** - Visualiza√ß√µes de performance e vendas
- ‚úÖ **Sistema de Backup** - Prote√ß√£o autom√°tica dos dados

## üöÄ Como Usar

### Op√ß√£o 1: Execut√°vel (Recomendado)
1. Baixe o arquivo `SistemaLanchonete.exe`
2. Execute diretamente - n√£o precisa instalar Python

### Op√ß√£o 2: Execu√ß√£o Direta
1. Certifique-se que tem Python 3.8+ instalado
2. Execute `executar_lanchonete.bat` (Windows) ou `python main.py`

### Op√ß√£o 3: Desenvolvimento
```bash
# Clonar reposit√≥rio
git clone https://github.com/SEU_USUARIO/sistema-lanchonete.git
cd sistema-lanchonete

# Instalar depend√™ncias
pip install -r requirements.txt

# Executar sistema
python main.py
```

## üì¶ Depend√™ncias

- Python 3.8+
- tkinter (inclu√≠do no Python)
- pandas
- matplotlib
- openpyxl
- pillow
- requests

## üõ†Ô∏è Desenvolvimento

O sistema est√° organizado em m√≥dulos:

- `src/estoque/` - Gerenciamento de produtos e estoque
- `src/interface/` - Interface gr√°fica do usu√°rio
- `src/pedidos/` - Controle de vendas e relat√≥rios
- `src/utils/` - Fun√ß√µes auxiliares
- `data/` - Banco de dados SQLite

## üìä Estrutura do Banco de Dados

### Tabela `estoque`
- produto (TEXT) - Nome do produto
- quantidade (INTEGER) - Quantidade em estoque
- preco (REAL) - Pre√ßo unit√°rio
- categoria (TEXT) - Categoria do produto

### Tabela `historico_vendas`
- id (INTEGER) - ID √∫nico da venda
- produto (TEXT) - Produto vendido
- quantidade (INTEGER) - Quantidade vendida
- preco_unitario (REAL) - Pre√ßo na venda
- valor_total (REAL) - Total da venda
- data_hora (TEXT) - Data e hora da venda

## üîß Configura√ß√£o

1. **Primeira execu√ß√£o**: O sistema cria automaticamente o banco de dados
2. **Backup**: Dados salvos em `data/banco.db`
3. **Relat√≥rios**: Exportados para pasta `data/`

## üìà Atualiza√ß√µes

O sistema inclui verifica√ß√£o autom√°tica de atualiza√ß√µes. Novas vers√µes s√£o baixadas automaticamente.

## üÜò Suporte

Para problemas ou sugest√µes:
1. Abra uma [Issue](https://github.com/SEU_USUARIO/sistema-lanchonete/issues)
2. Consulte a [Documenta√ß√£o Completa](DOCUMENTACAO_COMPLETA.md)
3. Verifique as [Instru√ß√µes de Instala√ß√£o](INSTRUCOES_INSTALACAO.md)

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a MIT License - veja o arquivo [LICENSE](LICENSE) para detalhes.

## üë®‚Äçüíª Desenvolvedor

Desenvolvido para uso em lanchonetes e pequenos com√©rcios aliment√≠cios.

---

**Vers√£o:** 2.0.0  
**√öltima atualiza√ß√£o:** $(date +'%d/%m/%Y')
"""
    
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("‚úÖ README.md criado")

def criar_requirements():
    """Cria arquivo requirements.txt"""
    print("\nüìÑ Criando requirements.txt...")
    
    requirements = """pandas>=1.5.0
matplotlib>=3.5.0
openpyxl>=3.0.0
Pillow>=9.0.0
requests>=2.28.0
"""
    
    with open('requirements.txt', 'w', encoding='utf-8') as f:
        f.write(requirements)
    
    print("‚úÖ requirements.txt criado")

def criar_license():
    """Cria arquivo de licen√ßa MIT"""
    print("\nüìÑ Criando LICENSE...")
    
    ano_atual = datetime.now().year
    license_content = f"""MIT License

Copyright (c) {ano_atual} Sistema Lanchonete

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
    
    with open('LICENSE', 'w', encoding='utf-8') as f:
        f.write(license_content)
    
    print("‚úÖ LICENSE criado")

def adicionar_arquivos_git():
    """Adiciona arquivos ao Git"""
    print("\n‚ûï Adicionando arquivos ao Git...")
    
    # Adicionar todos os arquivos importantes
    arquivos = [
        "main.py",
        "src/",
        "assets/",
        "tests/",
        "*.py",
        "*.md",
        "requirements.txt",
        "LICENSE",
        ".gitignore",
        "data/.gitkeep"
    ]
    
    for arquivo in arquivos:
        executar_comando(f"git add {arquivo}", False)
    
    print("‚úÖ Arquivos adicionados ao Git")

def fazer_primeiro_commit():
    """Faz o primeiro commit"""
    print("\nüíæ Fazendo primeiro commit...")
    
    commit_message = "üéâ Initial commit - Sistema completo de gerenciamento para lanchonete"
    sucesso, _ = executar_comando(f'git commit -m "{commit_message}"')
    
    if sucesso:
        print("‚úÖ Primeiro commit realizado")
        return True
    else:
        print("‚ö†Ô∏è Commit j√° existe ou n√£o h√° mudan√ßas")
        return True

def conectar_github():
    """Conecta com reposit√≥rio do GitHub"""
    print("\nüîó Conectando com GitHub...")
    
    print("Para conectar com GitHub, voc√™ precisa:")
    print("1. Ter um reposit√≥rio no GitHub (pode estar vazio)")
    print("2. Ter a URL do reposit√≥rio")
    print("\nExemplo de URL: https://github.com/seunome/sistema-lanchonete.git")
    
    github_url = input("\nDigite a URL do seu reposit√≥rio GitHub: ").strip()
    
    if not github_url:
        print("‚ùå URL n√£o fornecida")
        return False
    
    # Verificar se j√° tem remote origin
    sucesso, _ = executar_comando("git remote get-url origin", False)
    if sucesso:
        print("üìù Atualizando URL do reposit√≥rio remoto...")
        executar_comando(f"git remote set-url origin {github_url}")
    else:
        print("üìù Adicionando reposit√≥rio remoto...")
        executar_comando(f"git remote add origin {github_url}")
    
    print("‚úÖ GitHub conectado")
    return True

def enviar_para_github():
    """Envia c√≥digo para GitHub"""
    print("\nüì§ Enviando c√≥digo para GitHub...")
    
    # Verificar se tem commits
    sucesso, _ = executar_comando("git log --oneline -1", False)
    if not sucesso:
        print("‚ùå Nenhum commit encontrado. Fazendo commit primeiro...")
        fazer_primeiro_commit()
    
    # Enviar para GitHub
    print("üì§ Fazendo push para GitHub...")
    sucesso, output = executar_comando("git push -u origin main")
    
    if not sucesso:
        print("‚ö†Ô∏è Tentando com branch master...")
        executar_comando("git branch -M main")
        sucesso, _ = executar_comando("git push -u origin main")
    
    if sucesso:
        print("‚úÖ C√≥digo enviado para GitHub com sucesso!")
        return True
    else:
        print("‚ùå Erro ao enviar para GitHub")
        print("üí° Poss√≠veis solu√ß√µes:")
        print("   1. Verificar se a URL do reposit√≥rio est√° correta")
        print("   2. Fazer login no GitHub: gh auth login")
        print("   3. Usar token de acesso pessoal")
        return False

def criar_script_atualizacao():
    """Cria script para atualiza√ß√µes futuras"""
    print("\nüîÑ Criando script de atualiza√ß√£o...")
    
    script_content = """@echo off
echo ================================
echo   Atualizando Sistema GitHub
echo ================================
echo.

REM Verificar se h√° mudan√ßas
git status --porcelain > temp_status.txt
set /p changes=<temp_status.txt
del temp_status.txt

if "%changes%"=="" (
    echo Nenhuma mudan√ßa para enviar.
    pause
    exit /b 0
)

REM Adicionar mudan√ßas
echo Adicionando mudan√ßas...
git add .

REM Commit com timestamp
for /f "tokens=2 delims==" %%a in ('wmic OS Get localdatetime /value') do set "dt=%%a"
set "YY=%dt:~2,2%" & set "YYYY=%dt:~0,4%" & set "MM=%dt:~4,2%" & set "DD=%dt:~6,2%"
set "HH=%dt:~8,2%" & set "MIN=%dt:~10,2%" & set "SS=%dt:~12,2%"
set "timestamp=%DD%/%MM%/%YYYY% %HH%:%MIN%"

set /p "mensagem=Digite a mensagem do commit (ou pressione Enter para usar autom√°tica): "
if "%mensagem%"=="" set "mensagem=üîÑ Atualiza√ß√£o autom√°tica - %timestamp%"

echo Fazendo commit...
git commit -m "%mensagem%"

REM Enviar para GitHub
echo Enviando para GitHub...
git push

if %errorlevel% equ 0 (
    echo.
    echo ‚úÖ Atualiza√ß√£o enviada para GitHub com sucesso!
) else (
    echo.
    echo ‚ùå Erro ao enviar atualiza√ß√£o
)

echo.
pause
"""
    
    with open('atualizar_github.bat', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ Script atualizar_github.bat criado")
    print("üí° Para futuras atualiza√ß√µes, execute este arquivo!")

def main():
    """Fun√ß√£o principal de configura√ß√£o"""
    print("üöÄ Configura√ß√£o Git + GitHub para Sistema da Lanchonete")
    print("=" * 60)
    
    # Verifica√ß√µes iniciais
    if not verificar_git():
        return
    
    # Configura√ß√µes
    configurar_git_usuario()
    
    if not inicializar_repositorio():
        return
    
    # Criar arquivos necess√°rios
    criar_gitignore()
    criar_readme()
    criar_requirements()
    criar_license()
    
    # Git operations
    adicionar_arquivos_git()
    fazer_primeiro_commit()
    
    # GitHub
    if conectar_github():
        enviar_para_github()
    
    # Script para futuras atualiza√ß√µes
    criar_script_atualizacao()
    
    print("\nüéâ Configura√ß√£o conclu√≠da!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. ‚úÖ Seu c√≥digo j√° est√° no GitHub")
    print("2. üîÑ Para futuras atualiza√ß√µes: execute 'atualizar_github.bat'")
    print("3. üåê Acesse seu reposit√≥rio no GitHub para ver o c√≥digo")
    print("4. üìù Edite o README.md para personalizar as informa√ß√µes")
    
    print("\nüí° Comandos Git √∫teis:")
    print("   git status          - Ver status das mudan√ßas")
    print("   git add .           - Adicionar todas as mudan√ßas")
    print("   git commit -m 'msg' - Fazer commit")
    print("   git push            - Enviar para GitHub")

if __name__ == "__main__":
    main()